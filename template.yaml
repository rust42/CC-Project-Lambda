AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  portfolio-lambda

  Sample SAM Template for portfolio-lambda
  
Parameters:
  ApiDomainName:
    Type: String
    Description: "Domain name of the blog apis"
  CertificateArn:
    Type: String
    Description: "Certificate for blog api domain"
  SESEmailSender:
    Type: String
    Description: "SES email sender address"
  SESBCCEmail:
    Type: String
    Description: "BCC email to forward the email"
  HostedZoneId:
    Type: String
    Description: "Hosted zone id"
  ApiGatewayRegionalHostedZoneId:
    Type: String
    Description: "ApiGateway hosted zone id for region us-east-1"


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 512

Resources:
  AllBlogApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      RegionalCertificateArn: !Ref CertificateArn

  ContactGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      CacheClusterEnabled: false
      CacheClusterSize: "0.5"
      Cors:
        AllowMethods: "'POST,GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      MethodSettings:
        - ResourcePath: /
          HttpMethod: POST

  SubscriptionGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      CacheClusterEnabled: false
      CacheClusterSize: "0.5"
      Cors:
        AllowMethods: "'POST,GET,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      MethodSettings:
        - ResourcePath: /
          HttpMethod: POST
        - ResourcePath: /verify
          HttpMethod: POST

  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Subscriptions
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ContactTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Contact
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

#  SubscriptionsDeadLetterQueue:
#    Type: AWS::SQS::Queue

  SubscriptionsSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "subscriptionsQueue.fifo"
      FifoQueue: true
#      RedrivePolicy:
#        deadLetterTargetArn: !Ref SubscriptionsDeadLetterQueue
#        maxReceiveCount: 10

  SubscriptionQueueIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./BlogsFunction/target/cc-project-lambda.jar
      Handler: blogs.SubscriptionsSQSIngester::handleRequest
      Runtime: java17
      Policies:
        - SQSPollerPolicy:
              QueueName: !GetAtt SubscriptionsSQSQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'

      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SQS_QUEUE_URL_ENV_NAME: !GetAtt SubscriptionsSQSQueue.QueueUrl
          SES_EMAIL_SENDER_EMAIL_ADDRESS: !Ref SESEmailSender
          SES_EMAIL_BCC_ADDRESS: !Ref SESBCCEmail

      Events:
       QueueIngestion:
          Type: SQS
          Properties:
            BatchSize: 10
            Queue: !GetAtt SubscriptionsSQSQueue.Arn

  SubscriptionsPostFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./BlogsFunction/target/cc-project-lambda.jar
      Handler: blogs.Subscriptions::handleRequest
      Runtime: java17
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SubscriptionsSQSQueue.QueueName
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          SQS_QUEUE_URL_ENV_NAME: !GetAtt SubscriptionsSQSQueue.QueueUrl

      Events:
        PostApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref SubscriptionGatewayApi

        Verify:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /verify
            Method: POST
            RestApiId: !Ref SubscriptionGatewayApi

  ContactPostFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./BlogsFunction/target/cc-project-lambda.jar
      Handler: blogs.Contact::handleRequest
      Runtime: java17
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactTable

      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE

      Events:
        PostContactApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref ContactGatewayApi


  ContactDynamoDBStreamer:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: java17
      CodeUri: ./BlogsFunction/target/cc-project-lambda.jar
      Handler: blogs.ContactDynamoDBStream::handleRequest
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContactTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: '*'
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          SES_EMAIL_SENDER_EMAIL_ADDRESS: !Ref SESEmailSender
          SES_EMAIL_BCC_ADDRESS: !Ref SESBCCEmail
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ContactTable.StreamArn
            BatchSize: 10
            StartingPosition: LATEST


  ContactApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "contact"
      DomainName: !Ref AllBlogApiDomain
      RestApiId: !Ref ContactGatewayApi
      Stage: !Ref ContactGatewayApi.Stage

  SubscriptionsApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "subscription"
      DomainName: !Ref AllBlogApiDomain
      RestApiId: !Ref SubscriptionGatewayApi
      Stage: !Ref SubscriptionGatewayApi.Stage

  #
  WebsiteDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: "Z05093165SS7MHO0JP43"
      RecordSets:
        - Name: !Sub "${ApiDomainName}."
          Type: A
          AliasTarget:
            DNSName: !GetAtt AllBlogApiDomain.RegionalDomainName # Assuming you use Regional Domain Name
            HostedZoneId: !Ref ApiGatewayRegionalHostedZoneId
##            DNSName: !GetAtt [ FrontEndAppDistribution, DomainName ]

Outputs:
  SubscriptionsFunction:
    Description: "Subscription Function ARN"
    Value: !GetAtt SubscriptionsPostFunction.Arn
  ContactFunction:
    Description: "Contact Function ARN"
    Value: !GetAtt ContactPostFunction.Arn
